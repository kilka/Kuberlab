# OCR AKS Infrastructure Makefile
# Automated deployment and testing for the OCR AKS demo project

# Variables
SHELL := /bin/bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Configuration
TF_DIR := infra
KUBECONFIG := ~/.kube/config
CLUSTER_NAME := dev-ocr-aks-001
RESOURCE_GROUP := dev-ocr-rg-001

# Default target
.DEFAULT_GOAL := help

## Help
help: ## Show this help
	@echo "$(BLUE)OCR AKS Infrastructure Management$(NC)"
	@echo "===================================="
	@echo ""
	@echo "$(GREEN)Available targets:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BLUE)Quick Start:$(NC)"
	@echo "  1. make init        # Initialize Terraform"
	@echo "  2. make plan        # Review infrastructure changes"
	@echo "  3. make deploy      # Full deployment with tests"
	@echo "  4. make destroy     # Tear down everything"
	@echo ""
	@echo "$(RED)Cost Control:$(NC)"
	@echo "  • Deployment cost: ~$$0.60-0.70/hour"
	@echo "  • Always run 'make destroy' when done!"

## Infrastructure Commands
.PHONY: init validate plan deploy destroy clean

init: ## Initialize Terraform
	@echo "$(BLUE)Initializing Terraform...$(NC)"
	@cd $(TF_DIR) && terraform init -upgrade
	@echo "$(GREEN)✓ Terraform initialized$(NC)"

validate: init ## Validate Terraform configuration
	@echo "$(BLUE)Validating Terraform configuration...$(NC)"
	@cd $(TF_DIR) && terraform fmt -recursive
	@cd $(TF_DIR) && terraform validate
	@echo "$(GREEN)✓ Configuration is valid$(NC)"

lint: validate ## Run Terraform linters (tflint, checkov)
	@echo "$(BLUE)Running Terraform linters...$(NC)"
	@if command -v tflint &> /dev/null; then \
		cd $(TF_DIR) && tflint --init && tflint; \
	else \
		echo "$(YELLOW)⚠ tflint not installed, skipping$(NC)"; \
	fi
	@if command -v checkov &> /dev/null; then \
		checkov -d $(TF_DIR) --quiet --compact --skip-check CKV_AZURE_168,CKV_AZURE_169,CKV_AZURE_170; \
	else \
		echo "$(YELLOW)⚠ checkov not installed, skipping$(NC)"; \
	fi
	@echo "$(GREEN)✓ Linting complete$(NC)"

check-email: ## Check if budget email is configured
	@echo "$(BLUE)Checking budget email configuration...$(NC)"
	@if grep -q "your-email@example.com" $(TF_DIR)/terraform.tfvars; then \
		echo "$(RED)✗ ERROR: Please update budget_alert_email in $(TF_DIR)/terraform.tfvars$(NC)"; \
		echo "$(YELLOW)  Run: vi $(TF_DIR)/terraform.tfvars$(NC)"; \
		exit 1; \
	else \
		echo "$(GREEN)✓ Budget email configured$(NC)"; \
	fi

plan: validate check-email ## Create Terraform plan
	@echo "$(BLUE)Creating Terraform plan...$(NC)"
	@cd $(TF_DIR) && terraform plan -out=tfplan | tee plan.log
	@echo ""
	@echo "$(GREEN)✓ Plan created and saved to tfplan$(NC)"
	@echo "$(YELLOW)Resources to create: $$(grep "Plan:" $(TF_DIR)/plan.log | grep -oE '[0-9]+ to add' | grep -oE '[0-9]+')$(NC)"
	@echo "$(YELLOW)Estimated cost: ~$$0.60-0.70/hour$(NC)"

apply: ## Apply Terraform plan (requires existing plan)
	@echo "$(BLUE)Applying Terraform plan...$(NC)"
	@if [ ! -f "$(TF_DIR)/tfplan" ]; then \
		echo "$(RED)✗ No plan found. Run 'make plan' first$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)⚠ This will create Azure resources and incur costs!$(NC)"
	@read -p "Continue? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@cd $(TF_DIR) && terraform apply tfplan
	@echo "$(GREEN)✓ Infrastructure deployed$(NC)"
	@$(MAKE) show-outputs

deploy: ## Full deployment with all checks (init, validate, plan, apply, test)
	@echo "$(BLUE)Starting full deployment pipeline...$(NC)"
	@echo "========================================"
	@$(MAKE) init
	@$(MAKE) lint
	@$(MAKE) plan
	@echo ""
	@echo "$(YELLOW)⚠ DEPLOYMENT CONFIRMATION$(NC)"
	@echo "$(YELLOW)This will:$(NC)"
	@echo "  • Create ~40 Azure resources"
	@echo "  • Cost approximately $$0.60-0.70/hour"
	@echo "  • Set up budget alerts"
	@echo ""
	@read -p "$(RED)Deploy infrastructure? (type 'yes' to confirm): $(NC)" confirm && [ "$$confirm" = "yes" ] || exit 1
	@echo ""
	@echo "$(BLUE)Deploying infrastructure...$(NC)"
	@cd $(TF_DIR) && terraform apply tfplan
	@echo ""
	@echo "$(GREEN)✓ Infrastructure deployed successfully!$(NC)"
	@$(MAKE) show-outputs
	@$(MAKE) test-basic
	@echo ""
	@echo "$(GREEN)═══════════════════════════════════════$(NC)"
	@echo "$(GREEN)✓ DEPLOYMENT COMPLETE AND VERIFIED$(NC)"
	@echo "$(GREEN)═══════════════════════════════════════$(NC)"
	@echo ""
	@echo "$(YELLOW)Remember to run 'make destroy' when done!$(NC)"

destroy: ## Destroy all infrastructure (with confirmation)
	@echo "$(RED)WARNING: This will destroy all infrastructure!$(NC)"
	@echo "========================================"
	@echo "Resources to be destroyed:"
	@cd $(TF_DIR) && terraform state list 2>/dev/null | head -10 || true
	@echo "... and more"
	@echo ""
	@read -p "$(RED)Type 'destroy' to confirm: $(NC)" confirm && [ "$$confirm" = "destroy" ] || exit 1
	@echo "$(BLUE)Destroying infrastructure...$(NC)"
	@cd $(TF_DIR) && terraform destroy -auto-approve
	@echo "$(GREEN)✓ Infrastructure destroyed$(NC)"
	@$(MAKE) clean

destroy-force: ## Force destroy without confirmation (DANGEROUS!)
	@echo "$(RED)FORCE DESTROYING ALL INFRASTRUCTURE...$(NC)"
	@cd $(TF_DIR) && terraform destroy -auto-approve || true
	@$(MAKE) clean

clean: ## Clean up local files and state
	@echo "$(BLUE)Cleaning up local files...$(NC)"
	@rm -f $(TF_DIR)/tfplan $(TF_DIR)/plan.log $(TF_DIR)/.terraform.lock.hcl
	@rm -rf $(TF_DIR)/.terraform
	@echo "$(GREEN)✓ Cleanup complete$(NC)"

## Testing Commands
.PHONY: test test-basic test-connectivity test-security test-cost show-outputs

test: test-basic test-connectivity test-security ## Run all tests

test-basic: ## Basic infrastructure tests
	@echo "$(BLUE)Running basic infrastructure tests...$(NC)"
	@echo -n "  Checking resource group... "
	@if az group show --name $(RESOURCE_GROUP) &>/dev/null; then \
		echo "$(GREEN)✓$(NC)"; \
	else \
		echo "$(RED)✗$(NC)"; \
		exit 1; \
	fi
	@echo -n "  Checking AKS cluster... "
	@if az aks show --name $(CLUSTER_NAME) --resource-group $(RESOURCE_GROUP) &>/dev/null; then \
		echo "$(GREEN)✓$(NC)"; \
	else \
		echo "$(RED)✗$(NC)"; \
		exit 1; \
	fi
	@echo -n "  Checking ACR... "
	@if az acr list --resource-group $(RESOURCE_GROUP) --query "[0].name" &>/dev/null; then \
		echo "$(GREEN)✓$(NC)"; \
	else \
		echo "$(RED)✗$(NC)"; \
	fi
	@echo "$(GREEN)✓ Basic tests passed$(NC)"

test-connectivity: ## Test AKS connectivity
	@echo "$(BLUE)Testing AKS connectivity...$(NC)"
	@az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --overwrite-existing
	@kubectl get nodes > /dev/null 2>&1 && echo "$(GREEN)✓ AKS cluster accessible$(NC)" || echo "$(RED)✗ Cannot connect to AKS$(NC)"
	@kubectl get namespaces > /dev/null 2>&1 && echo "$(GREEN)✓ Kubernetes API responding$(NC)" || echo "$(RED)✗ Kubernetes API not responding$(NC)"

test-security: ## Test security configurations
	@echo "$(BLUE)Testing security configurations...$(NC)"
	@echo -n "  Checking RBAC... "
	@if kubectl auth can-i create pods --all-namespaces 2>/dev/null; then \
		echo "$(YELLOW)⚠ Admin access detected$(NC)"; \
	else \
		echo "$(GREEN)✓$(NC)"; \
	fi
	@echo -n "  Checking Workload Identity... "
	@if az aks show --name $(CLUSTER_NAME) --resource-group $(RESOURCE_GROUP) --query "oidcIssuerProfile.enabled" -o tsv | grep -q "true"; then \
		echo "$(GREEN)✓$(NC)"; \
	else \
		echo "$(RED)✗$(NC)"; \
	fi
	@echo "$(GREEN)✓ Security tests complete$(NC)"

test-cost: ## Check current Azure costs
	@echo "$(BLUE)Checking current costs...$(NC)"
	@SUBSCRIPTION_ID=$$(az account show --query id -o tsv); \
	START_DATE=$$(date -u -d '7 days ago' '+%Y-%m-%d'); \
	END_DATE=$$(date -u '+%Y-%m-%d'); \
	echo "  Subscription: $$SUBSCRIPTION_ID"; \
	echo "  Period: $$START_DATE to $$END_DATE"; \
	az consumption usage list \
		--subscription $$SUBSCRIPTION_ID \
		--start-date $$START_DATE \
		--end-date $$END_DATE \
		--query "[?tags.Project=='ocr-aks'] | [0:5].{Service:meterDetails.meterName, Cost:pretaxCost}" \
		--output table 2>/dev/null || echo "$(YELLOW)No cost data available yet$(NC)"

show-outputs: ## Show Terraform outputs
	@echo "$(BLUE)Terraform Outputs:$(NC)"
	@echo "===================="
	@cd $(TF_DIR) && terraform output -json | jq -r 'to_entries[] | select(.value.sensitive != true) | "  \(.key): \(.value.value)"' 2>/dev/null || true
	@echo ""
	@echo "$(YELLOW)Connection Commands:$(NC)"
	@echo "  AKS: az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME)"
	@echo "  Portal: https://portal.azure.com/#@/resource/subscriptions/$$(az account show --query id -o tsv)/resourceGroups/$(RESOURCE_GROUP)"

## Utility Commands
.PHONY: kubeconfig port-forward logs cost-check help

kubeconfig: ## Get AKS credentials
	@echo "$(BLUE)Getting AKS credentials...$(NC)"
	@az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --overwrite-existing
	@echo "$(GREEN)✓ Kubeconfig updated$(NC)"
	@kubectl config current-context

logs: ## Show AKS cluster logs
	@echo "$(BLUE)Recent cluster events:$(NC)"
	@kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -20

cost-check: test-cost ## Alias for test-cost

port-forward: ## Port forward to a service (usage: make port-forward SERVICE=<service> PORT=<port>)
	@if [ -z "$(SERVICE)" ] || [ -z "$(PORT)" ]; then \
		echo "$(RED)Usage: make port-forward SERVICE=<service-name> PORT=<port>$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)Port forwarding $(SERVICE) on port $(PORT)...$(NC)"
	@kubectl port-forward service/$(SERVICE) $(PORT):$(PORT)

## Development Commands
.PHONY: fmt format validate-modules

fmt format: ## Format all Terraform files
	@echo "$(BLUE)Formatting Terraform files...$(NC)"
	@cd $(TF_DIR) && terraform fmt -recursive
	@echo "$(GREEN)✓ Files formatted$(NC)"

validate-modules: ## Validate individual Terraform modules
	@echo "$(BLUE)Validating Terraform modules...$(NC)"
	@for module in $(TF_DIR)/modules/*; do \
		if [ -d "$$module" ]; then \
			echo "  Checking $$(basename $$module)..."; \
			cd "$$module" && terraform init -backend=false > /dev/null 2>&1 && terraform validate > /dev/null 2>&1 && \
			echo "    $(GREEN)✓$(NC)" || echo "    $(RED)✗$(NC)"; \
		fi \
	done

## Safety Commands
.PHONY: safety-check emergency-stop

safety-check: ## Check for common issues before deployment
	@echo "$(BLUE)Running safety checks...$(NC)"
	@echo -n "  Azure CLI logged in... "
	@az account show > /dev/null 2>&1 && echo "$(GREEN)✓$(NC)" || (echo "$(RED)✗ Run: az login$(NC)" && exit 1)
	@echo -n "  Terraform installed... "
	@terraform version > /dev/null 2>&1 && echo "$(GREEN)✓$(NC)" || (echo "$(RED)✗ Install terraform$(NC)" && exit 1)
	@echo -n "  kubectl installed... "
	@kubectl version --client > /dev/null 2>&1 && echo "$(GREEN)✓$(NC)" || echo "$(YELLOW)⚠ Install kubectl for full functionality$(NC)"
	@echo -n "  Budget email configured... "
	@$(MAKE) check-email > /dev/null 2>&1 && echo "$(GREEN)✓$(NC)" || echo "$(RED)✗$(NC)"
	@echo "$(GREEN)✓ Safety checks passed$(NC)"

emergency-stop: destroy-force ## Emergency destroy (same as destroy-force)

# Special targets
.PHONY: all quick-deploy quick-destroy

all: deploy ## Full deployment (same as deploy)

quick-deploy: ## Quick deployment without linting
	@$(MAKE) init
	@$(MAKE) validate
	@$(MAKE) plan
	@cd $(TF_DIR) && terraform apply tfplan
	@$(MAKE) show-outputs

quick-destroy: ## Quick destroy without confirmation prompts
	@echo "$(RED)Quick destroying infrastructure...$(NC)"
	@cd $(TF_DIR) && terraform destroy -auto-approve

# Prevent running as root
check-not-root:
	@if [ "$$(id -u)" = "0" ]; then \
		echo "$(RED)This makefile should not be run as root$(NC)"; \
		exit 1; \
	fi